"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Business —á–µ—Ä–µ–∑ asyncpg.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø—Ä—è–º–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ bulk –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.
"""
import asyncio
import asyncpg
import logging
from typing import Dict, List, Set
from django.conf import settings
import aiohttp

logger = logging.getLogger(__name__)


class AsyncBusinessService:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Business —á–µ—Ä–µ–∑ asyncpg."""
    
    FUSION_BASE = 'https://api.yelp.com'
    
    @classmethod
    async def get_db_pool(cls):
        """–°—Ç–≤–æ—Ä—é—î asyncpg connection pool."""
        db_config = settings.DATABASES['default']
        return await asyncpg.create_pool(
            host=db_config['HOST'],
            port=db_config.get('PORT', 5432),
            database=db_config['NAME'],
            user=db_config['USER'],
            password=db_config['PASSWORD'],
            min_size=5,
            max_size=20
        )
    
    @classmethod
    async def get_existing_businesses(cls, pool: asyncpg.Pool, business_ids: Set[str]) -> Dict[str, Dict]:
        """
        Bulk –∑–∞–ø–∏—Ç —ñ—Å–Ω—É—é—á–∏—Ö businesses –∑ –ë–î.
        
        Returns:
            Dict[business_id -> {name, url, alias}]
        """
        if not business_ids:
            return {}
        
        query = """
            SELECT yelp_business_id, name, url, alias
            FROM ads_business
            WHERE yelp_business_id = ANY($1)
                AND name IS NOT NULL
                AND name != ''
                AND fetch_failed = FALSE
        """
        
        async with pool.acquire() as conn:
            rows = await conn.fetch(query, list(business_ids))
        
        result = {
            row['yelp_business_id']: {
                'name': row['name'],
                'url': row['url'],
                'alias': row['alias']
            }
            for row in rows
        }
        
        logger.info(f"üíæ [DB] Found {len(result)}/{len(business_ids)} businesses in cache")
        return result
    
    @classmethod
    async def fetch_business_from_api(
        cls, 
        session: aiohttp.ClientSession, 
        business_id: str, 
        semaphore: asyncio.Semaphore
    ):
        """
        –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –æ–¥–∏–Ω business –∑ Yelp Fusion API.
        
        Semaphore –æ–±–º–µ–∂—É—î concurrent requests (rate limiting).
        """
        async with semaphore:
            url = f"{cls.FUSION_BASE}/v3/businesses/{business_id}"
            try:
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        return {
                            'yelp_business_id': business_id,
                            'name': data.get('name'),
                            'url': data.get('url'),
                            'alias': data.get('alias'),
                            'fetch_failed': False
                        }
                    elif response.status == 404:
                        logger.debug(f"Business {business_id} not found (404)")
                        return {'yelp_business_id': business_id, 'fetch_failed': True}
                    else:
                        logger.warning(f"Business {business_id} fetch failed with status {response.status}")
                        return {'yelp_business_id': business_id, 'fetch_failed': True}
            except Exception as e:
                logger.warning(f"Failed to fetch {business_id}: {e}")
                return {'yelp_business_id': business_id, 'fetch_failed': True}
        
        return None
    
    @classmethod
    async def fetch_businesses_async(
        cls, 
        business_ids: Set[str],
        api_key: str,
        max_concurrent: int = 20
    ) -> List[Dict]:
        """
        –ü–∞—Ä–∞–ª–µ–ª—å–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î businesses –∑ Yelp Fusion API.
        
        Args:
            business_ids: Set of business IDs to fetch
            api_key: Yelp Fusion API key
            max_concurrent: Max concurrent requests (rate limiting)
        
        Returns:
            List of business dicts
        """
        if not business_ids:
            return []
        
        semaphore = asyncio.Semaphore(max_concurrent)
        headers = {'Authorization': f'Bearer {api_key}'}
        
        async with aiohttp.ClientSession(headers=headers) as session:
            tasks = [
                cls.fetch_business_from_api(session, bid, semaphore)
                for bid in business_ids
            ]
            results = await asyncio.gather(*tasks)
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ None
        businesses = [r for r in results if r]
        successful = len([b for b in businesses if not b.get('fetch_failed')])
        logger.info(f"üì° [API] Fetched {successful}/{len(business_ids)} businesses successfully")
        
        return businesses
    
    @classmethod
    async def save_businesses_to_db(cls, pool: asyncpg.Pool, businesses: List[Dict]) -> int:
        """
        Bulk –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è businesses –≤ –ë–î —á–µ—Ä–µ–∑ asyncpg.
        
        –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î INSERT ... ON CONFLICT –¥–ª—è upsert.
        """
        if not businesses:
            return 0
        
        query = """
            INSERT INTO ads_business (yelp_business_id, name, url, alias, cached_at, fetch_failed)
            VALUES ($1, $2, $3, $4, NOW(), $5)
            ON CONFLICT (yelp_business_id) 
            DO UPDATE SET
                name = EXCLUDED.name,
                url = EXCLUDED.url,
                alias = EXCLUDED.alias,
                cached_at = NOW(),
                fetch_failed = EXCLUDED.fetch_failed
        """
        
        async with pool.acquire() as conn:
            await conn.executemany(
                query,
                [
                    (
                        b['yelp_business_id'],
                        b.get('name'),
                        b.get('url'),
                        b.get('alias'),
                        b.get('fetch_failed', False)
                    )
                    for b in businesses
                ]
            )
        
        logger.info(f"üíæ [ASYNCPG] Saved {len(businesses)} businesses to DB")
        return len(businesses)
    
    @classmethod
    async def link_programs_to_businesses(cls, pool: asyncpg.Pool, username: str) -> int:
        """
        –ó–≤'—è–∑—É—î –ø—Ä–æ–≥—Ä–∞–º–∏ –∑ businesses —á–µ—Ä–µ–∑ foreign key.
        –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è businesses.
        """
        query = """
            UPDATE ads_programregistry pr
            SET business_id = b.id
            FROM ads_business b
            WHERE pr.yelp_business_id = b.yelp_business_id
                AND pr.username = $1
                AND pr.business_id IS NULL
        """
        
        async with pool.acquire() as conn:
            result = await conn.execute(query, username)
        
        # –ü–∞—Ä—Å–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç "UPDATE N"
        updated = int(result.split()[-1]) if result else 0
        logger.info(f"üîó [ASYNCPG] Linked {updated} programs to businesses for {username}")
        return updated
    
    @classmethod
    async def sync_businesses(
        cls,
        business_ids: Set[str],
        api_key: str,
        username: str,
        max_concurrent: int = 20
    ) -> Dict[str, Dict]:
        """
        –ì–æ–ª–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥: —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î businesses (DB ‚Üí API ‚Üí DB).
        
        Returns:
            Dict[business_id -> {name, url, alias}]
        """
        if not business_ids:
            logger.info("No business IDs to sync")
            return {}
        
        pool = await cls.get_db_pool()
        
        try:
            # 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –≤–∂–µ —î –≤ –ë–î
            existing = await cls.get_existing_businesses(pool, business_ids)
            
            # 2. –í–∏–∑–Ω–∞—á–∞—î–º–æ —â–æ —Ç—Ä–µ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏
            to_fetch = business_ids - set(existing.keys())
            
            if not to_fetch:
                logger.info("‚úÖ All businesses already in DB")
                # ‚ö†Ô∏è –ù–ï –ª—ñ–Ω–∫—É—î–º–æ —Ç—É—Ç - —Ü–µ –±—É–¥–µ –∑—Ä–æ–±–ª–µ–Ω–æ –æ–∫—Ä–µ–º–æ –≤ async_sync_service
                return existing
            
            logger.info(f"üì° Need to fetch {len(to_fetch)} businesses from API")
            
            # 3. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑ API (–ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ)
            new_businesses = await cls.fetch_businesses_async(to_fetch, api_key, max_concurrent)
            
            # 4. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
            await cls.save_businesses_to_db(pool, new_businesses)
            
            # 5. ‚ö†Ô∏è –ù–ï –ª—ñ–Ω–∫—É—î–º–æ —Ç—É—Ç - —Ü–µ –±—É–¥–µ –∑—Ä–æ–±–ª–µ–Ω–æ –æ–∫—Ä–µ–º–æ –≤ async_sync_service –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º
            
            # 6. –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            for b in new_businesses:
                if not b.get('fetch_failed') and b.get('name'):
                    existing[b['yelp_business_id']] = {
                        'name': b['name'],
                        'url': b.get('url'),
                        'alias': b.get('alias')
                    }
            
            return existing
        
        finally:
            await pool.close()

