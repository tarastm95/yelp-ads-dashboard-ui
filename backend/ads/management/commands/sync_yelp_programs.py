import logging
from datetime import datetime, timedelta
from django.core.management.base import BaseCommand
from django.utils import timezone
from django.db.models import Q
from ads.models import YelpProgram, ProgramSyncLog, SyncSettings
from ads.services import YelpService

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–∏ –∑ Yelp Partner API'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--mode', 
            choices=['full', 'incremental', 'recent'],
            default='incremental',
            help='–†–µ–∂–∏–º —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó'
        )
        parser.add_argument(
            '--hours', 
            type=int, 
            default=24,
            help='–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω –¥–ª—è —Ä–µ–∂–∏–º—É recent'
        )
        parser.add_argument(
            '--limit', 
            type=int, 
            default=None,
            help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º'
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü—Ä–∏–º—É—Å–æ–≤–∞ –ø–æ–≤–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è'
        )
    
    def handle(self, *args, **options):
        mode = options['mode']
        
        if options['force']:
            mode = 'full'
            
        sync_log = ProgramSyncLog.objects.create(
            sync_type=mode.upper()
        )
        
        try:
            if mode == 'full':
                self.full_sync(sync_log, options)
            elif mode == 'incremental':
                self.incremental_sync(sync_log, options)
            elif mode == 'recent':
                self.recent_sync(sync_log, options)
                
        except Exception as e:
            sync_log.status = 'FAILED'
            sync_log.errors.append(str(e))
            sync_log.save()
            self.stdout.write(self.style.ERROR(f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'))
            raise
    
    def full_sync(self, sync_log, options):
        """–ü–æ–≤–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö –ø—Ä–æ–≥—Ä–∞–º"""
        self.stdout.write('üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ –ø–æ–≤–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é...')
        
        if options['force']:
            YelpProgram.objects.all().delete()
            self.stdout.write('üóëÔ∏è –û—á–∏—â–µ–Ω–æ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –¥–∞–Ω—ñ')
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        first_batch = YelpService.get_all_programs(0, 40, 'ALL')
        total_count = first_batch.get('total_count', 0)
        sync_log.total_programs = total_count
        sync_log.save()
        
        self.stdout.write(f'üìä –ó–Ω–∞–π–¥–µ–Ω–æ {total_count} –ø—Ä–æ–≥—Ä–∞–º')
        
        # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –≤—Å—ñ –ø—Ä–æ–≥—Ä–∞–º–∏
        synced_count = 0
        offset = 0
        limit = 40
        
        while offset < total_count:
            try:
                if offset == 0:
                    batch = first_batch
                else:
                    batch = YelpService.get_all_programs(offset, limit, 'ALL')
                
                programs = batch.get('programs', [])
                if not programs:
                    break
                
                counts = self.sync_batch(programs)
                synced_count += counts['synced']
                sync_log.synced_programs = synced_count
                sync_log.updated_programs += counts['updated']
                sync_log.save()
                
                offset += limit
                self.stdout.write(f'üìà {synced_count}/{total_count} –ø—Ä–æ–≥—Ä–∞–º...')
                
            except Exception as e:
                self.handle_sync_error(sync_log, offset, e)
                offset += limit
        
        # –ü–æ–∑–Ω–∞—á–∞—î–º–æ –≤–∏–¥–∞–ª–µ–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏
        deleted_count = self.mark_deleted_programs()
        sync_log.deleted_programs = deleted_count
        
        self.complete_sync(sync_log, synced_count)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
        SyncSettings.set_setting('last_full_sync', timezone.now().isoformat())
    
    def incremental_sync(self, sync_log, options):
        """–Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Ç—ñ–ª—å–∫–∏ –Ω–æ–≤–∏—Ö/–∑–º—ñ–Ω–µ–Ω–∏—Ö –ø—Ä–æ–≥—Ä–∞–º"""
        self.stdout.write('‚ö° –ü–æ—á–∏–Ω–∞—î–º–æ —ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é...')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –±—É–ª–∞ –ø–æ–≤–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
        last_full_sync = SyncSettings.get_setting('last_full_sync')
        if not last_full_sync:
            self.stdout.write('‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó. –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ–≤–Ω—É.')
            return self.full_sync(sync_log, options)
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≥—Ä–∞–º–∏ —â–æ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        cutoff_time = timezone.now() - timedelta(hours=options.get('hours', 24))
        programs_to_check = YelpProgram.objects.filter(
            Q(last_synced__lt=cutoff_time) | Q(program_status='ACTIVE')
        ).values_list('program_id', flat=True)
        
        self.stdout.write(f'üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ {len(programs_to_check)} –ø—Ä–æ–≥—Ä–∞–º...')
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ü—ñ –ø—Ä–æ–≥—Ä–∞–º–∏
        synced_count = 0
        for program_id in programs_to_check:
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É –∑ API
                program_data = YelpService.get_partner_program_info(program_id)
                if program_data.get('programs'):
                    counts = self.sync_batch(program_data['programs'])
                    synced_count += counts['synced']
                    sync_log.updated_programs += counts['updated']
            except Exception as e:
                self.handle_sync_error(sync_log, program_id, e)
        
        self.complete_sync(sync_log, synced_count)
        SyncSettings.set_setting('last_incremental_sync', timezone.now().isoformat())
    
    def recent_sync(self, sync_log, options):
        """–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø—Ä–æ–≥—Ä–∞–º"""
        hours = options.get('hours', 24)
        self.stdout.write(f'üïí –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–≥—Ä–∞–º –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ {hours} –≥–æ–¥–∏–Ω...')
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏
        batch = YelpService.get_all_programs(0, 40, 'CURRENT')
        programs = batch.get('programs', [])
        
        counts = self.sync_batch(programs)
        self.complete_sync(sync_log, counts['synced'])
    
    def sync_batch(self, programs):
        """–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ batch –ø—Ä–æ–≥—Ä–∞–º"""
        synced = 0
        updated = 0
        
        for program_data in programs:
            try:
                program_id = program_data.get('program_id')
                if not program_id:
                    continue
                
                # –í–∏—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ
                businesses = program_data.get('businesses', [])
                yelp_business_id = businesses[0].get('yelp_business_id') if businesses else None
                partner_business_id = businesses[0].get('partner_business_id') if businesses else None
                metrics = program_data.get('program_metrics', {})
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ
                program, created = YelpProgram.objects.update_or_create(
                    program_id=program_id,
                    defaults={
                        'program_type': program_data.get('program_type'),
                        'program_status': program_data.get('program_status'),
                        'program_pause_status': program_data.get('program_pause_status', 'NOT_PAUSED'),
                        'yelp_business_id': yelp_business_id,
                        'partner_business_id': partner_business_id,
                        'start_date': program_data.get('start_date'),
                        'end_date': program_data.get('end_date'),
                        'active_features': program_data.get('active_features', []),
                        'available_features': program_data.get('available_features', []),
                        'budget': metrics.get('budget'),
                        'currency': metrics.get('currency', 'USD'),
                        'is_autobid': metrics.get('is_autobid'),
                        'max_bid': metrics.get('max_bid'),
                        'fee_period': metrics.get('fee_period'),
                        'billed_impressions': metrics.get('billed_impressions'),
                        'billed_clicks': metrics.get('billed_clicks'),
                        'ad_cost': metrics.get('ad_cost'),
                        'future_budget_changes': program_data.get('future_budget_changes', []),
                        'is_deleted': False,
                    }
                )
                
                if created:
                    synced += 1
                else:
                    updated += 1
                    
            except Exception as e:
                logger.error(f'–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø—Ä–æ–≥—Ä–∞–º–∏ {program_id}: {e}')
        
        return {'synced': synced, 'updated': updated}
    
    def mark_deleted_programs(self):
        """–ü–æ–∑–Ω–∞—á–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–∏ —è–∫ –≤–∏–¥–∞–ª–µ–Ω—ñ, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î –≤ API"""
        # –¢—ñ–ª—å–∫–∏ –¥–ª—è –ø–æ–≤–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
        cutoff_time = timezone.now() - timedelta(hours=1)
        deleted_count = YelpProgram.objects.filter(
            last_synced__lt=cutoff_time,
            is_deleted=False
        ).update(is_deleted=True)
        
        return deleted_count
    
    def handle_sync_error(self, sync_log, identifier, error):
        """–û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó"""
        error_msg = f'–ü–æ–º–∏–ª–∫–∞ {identifier}: {str(error)}'
        logger.error(error_msg)
        sync_log.errors.append(error_msg)
        sync_log.save()
    
    def complete_sync(self, sync_log, synced_count):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó"""
        sync_log.synced_programs = synced_count
        sync_log.status = 'COMPLETED'
        sync_log.completed_at = timezone.now()
        sync_log.save()
        
        self.stdout.write(
            self.style.SUCCESS(
                f'‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! '
                f'–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ: {synced_count}, '
                f'–û–Ω–æ–≤–ª–µ–Ω–æ: {sync_log.updated_programs}, '
                f'–í–∏–¥–∞–ª–µ–Ω–æ: {sync_log.deleted_programs}'
            )
        )
