#!/usr/bin/env python
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó business names.

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
    python backend/test_business_names.py
"""

import os
import sys
import django

# Setup Django
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'yelp_dashboard.settings')
django.setup()

from ads.models import ProgramRegistry
from ads.sync_service import ProgramSyncService
from django.contrib.auth import get_user_model

User = get_user_model()


def test_business_names_in_db():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±—ñ–∑–Ω–µ—Å—ñ–≤ –∑ –Ω–∞–∑–≤–∞–º–∏ –≤ –ë–î"""
    print("\n" + "="*60)
    print("üìä –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ business names –≤ –ë–î")
    print("="*60)
    
    # –í—Å—å–æ–≥–æ –±—ñ–∑–Ω–µ—Å—ñ–≤
    total_businesses = (
        ProgramRegistry.objects
        .values('yelp_business_id')
        .distinct()
        .count()
    )
    
    # –ë—ñ–∑–Ω–µ—Å–∏ –∑ –Ω–∞–∑–≤–∞–º–∏
    businesses_with_names = (
        ProgramRegistry.objects
        .filter(business_name__isnull=False)
        .exclude(business_name='')
        .values('yelp_business_id')
        .distinct()
        .count()
    )
    
    # –ë—ñ–∑–Ω–µ—Å–∏ –±–µ–∑ –Ω–∞–∑–≤
    businesses_without_names = total_businesses - businesses_with_names
    
    print(f"\n‚úÖ –í—Å—å–æ–≥–æ –±—ñ–∑–Ω–µ—Å—ñ–≤: {total_businesses}")
    print(f"‚úÖ –ó –Ω–∞–∑–≤–∞–º–∏: {businesses_with_names}")
    print(f"‚ö†Ô∏è  –ë–µ–∑ –Ω–∞–∑–≤: {businesses_without_names}")
    
    if businesses_without_names > 0:
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –ó–∞–ø—É—Å—Ç–∏—Ç–∏ backfill –¥–ª—è {businesses_without_names} –±—ñ–∑–Ω–µ—Å—ñ–≤")
        return False
    
    return True


def test_backfill(username=None):
    """–¢–µ—Å—Ç—É—î backfill –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    print("\n" + "="*60)
    print("üì° –¢–µ—Å—Ç 2: Backfill –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö business names")
    print("="*60)
    
    if not username:
        # –ë–µ—Ä–µ–º –ø–µ—Ä—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø—Ä–æ–≥—Ä–∞–º–∞–º–∏
        first_program = ProgramRegistry.objects.first()
        if not first_program:
            print("‚ùå –ù–µ–º–∞—î –ø—Ä–æ–≥—Ä–∞–º –≤ –ë–î")
            return False
        username = first_program.username
    
    print(f"\nüîç –¢–µ—Å—Ç—É—î–º–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {username}")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ backfill (—Ç—ñ–ª—å–∫–∏ 5 –¥–ª—è —Ç–µ—Å—Ç—É)
    result = ProgramSyncService.backfill_missing_business_names(username, max_fetch=5)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç backfill:")
    print(f"   ‚Ä¢ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {result.get('fetched', 0)}")
    print(f"   ‚Ä¢ –ü–æ–º–∏–ª–æ–∫: {result.get('failed', 0)}")
    print(f"   ‚Ä¢ –í—Å—å–æ–≥–æ –±–µ–∑ –Ω–∞–∑–≤: {result.get('total', 0)}")
    print(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
    
    return result.get('status') in ['completed', 'up_to_date']


def test_business_ids_view():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —â–æ BusinessIdsView –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–∑–≤–∏"""
    print("\n" + "="*60)
    print("üîç –¢–µ—Å—Ç 3: BusinessIdsView response")
    print("="*60)
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    first_program = ProgramRegistry.objects.first()
    if not first_program:
        print("‚ùå –ù–µ–º–∞—î –ø—Ä–æ–≥—Ä–∞–º –≤ –ë–î")
        return False
    
    username = first_program.username
    
    # –û—Ç—Ä–∏–º—É—î–º–æ business IDs
    businesses = ProgramSyncService.get_business_ids_for_user(username)
    
    if not businesses:
        print("‚ùå –ù–µ–º–∞—î –±—ñ–∑–Ω–µ—Å—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
        return False
    
    print(f"\n‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(businesses)} –±—ñ–∑–Ω–µ—Å—ñ–≤")
    print("\nüìã –ü–µ—Ä—à—ñ 5 –±—ñ–∑–Ω–µ—Å—ñ–≤:")
    
    for i, biz in enumerate(businesses[:5], 1):
        business_id = biz['business_id']
        business_name = biz.get('business_name', 'N/A')
        program_count = biz.get('program_count', 0)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –Ω–∞–∑–≤–∞
        has_name = business_name and business_name != business_id
        status = "‚úÖ" if has_name else "‚ö†Ô∏è"
        
        print(f"{status} {i}. {business_name[:40]}... ‚Ä¢ {business_id[:16]}... ‚Ä¢ {program_count} programs")
    
    # –†–∞—Ö—É—î–º–æ —Å–∫—ñ–ª—å–∫–∏ –∑ –Ω–∞–∑–≤–∞–º–∏
    with_names = sum(1 for b in businesses if b.get('business_name') and b['business_name'] != b['business_id'])
    percentage = (with_names / len(businesses)) * 100 if businesses else 0
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   ‚Ä¢ –ó –Ω–∞–∑–≤–∞–º–∏: {with_names}/{len(businesses)} ({percentage:.1f}%)")
    
    return percentage > 80  # –û—á—ñ–∫—É—î–º–æ —â–æ —Ö–æ—á–∞ –± 80% –º–∞—é—Ç—å –Ω–∞–∑–≤–∏


def test_sample_business_name():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ business name"""
    print("\n" + "="*60)
    print("üîç –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É")
    print("="*60)
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –±—ñ–∑–Ω–µ—Å –∑ –Ω–∞–∑–≤–æ—é
    program_with_name = (
        ProgramRegistry.objects
        .filter(business_name__isnull=False)
        .exclude(business_name='')
        .first()
    )
    
    if not program_with_name:
        print("‚ö†Ô∏è  –ù–µ–º–∞—î –ø—Ä–æ–≥—Ä–∞–º –∑ business_name –≤ –ë–î")
        return False
    
    print(f"\n‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–≥—Ä–∞–º—É:")
    print(f"   ‚Ä¢ Program ID: {program_with_name.program_id}")
    print(f"   ‚Ä¢ Business ID: {program_with_name.yelp_business_id}")
    print(f"   ‚Ä¢ Business Name: {program_with_name.business_name}")
    print(f"   ‚Ä¢ Program Type: {program_with_name.program_name}")
    print(f"   ‚Ä¢ Status: {program_with_name.status}")
    
    return True


def main():
    """–ó–∞–ø—É—Å–∫–∞—î –≤—Å—ñ —Ç–µ—Å—Ç–∏"""
    print("\n" + "="*60)
    print("üöÄ –¢–ï–°–¢–£–í–ê–ù–ù–Ø BUSINESS NAMES IMPLEMENTATION")
    print("="*60)
    
    results = []
    
    # –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ë–î
    results.append(("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ë–î", test_business_names_in_db()))
    
    # –¢–µ—Å—Ç 2: Backfill (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ)
    if ProgramRegistry.objects.exists():
        results.append(("Backfill", test_backfill()))
    
    # –¢–µ—Å—Ç 3: BusinessIdsView
    results.append(("BusinessIdsView", test_business_ids_view()))
    
    # –¢–µ—Å—Ç 4: –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥
    results.append(("–ü—Ä–∏–∫–ª–∞–¥ –±—ñ–∑–Ω–µ—Å—É", test_sample_business_name()))
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "="*60)
    print("üìä –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–Ü–í")
    print("="*60)
    
    for name, passed in results:
        status = "‚úÖ PASS" if passed else "‚ùå FAIL"
        print(f"{status}: {name}")
    
    all_passed = all(result for _, result in results)
    
    if all_passed:
        print("\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è  –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –≤–∏—â–µ.")
    
    print("="*60 + "\n")
    
    return 0 if all_passed else 1


if __name__ == '__main__':
    sys.exit(main())

