import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Switch } from '@/components/ui/switch';
import { Badge } from '@/components/ui/badge';
import { FolderOpen, Save, X, Plus, Trash2, Eye, CheckCircle, XCircle } from 'lucide-react';

interface YelpPortfolioProject {
  project_id: string;
  published: boolean;
}

interface YelpPortfolioData {
  projects: YelpPortfolioProject[];
}

interface YelpPortfolioEditorProps {
  data?: YelpPortfolioData;
  onSave: (data: YelpPortfolioData) => void;
  onCancel: () => void;
  isLoading?: boolean;
}

const YelpPortfolioEditor: React.FC<YelpPortfolioEditorProps> = ({
  data,
  onSave,
  onCancel,
  isLoading = false
}) => {
  const [projects, setProjects] = useState<YelpPortfolioProject[]>(
    data?.projects || []
  );

  useEffect(() => {
    if (data) {
      setProjects(data.projects || []);
    }
  }, [data]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // Filter out empty project IDs
    const validProjects = projects
      .filter(p => p.project_id.trim())
      .map(p => ({
        project_id: p.project_id.trim(),
        published: p.published
      }));

    onSave({ projects: validProjects });
  };

  const addProject = () => {
    setProjects(prev => [...prev, { project_id: '', published: true }]);
  };

  const removeProject = (index: number) => {
    setProjects(prev => prev.filter((_, i) => i !== index));
  };

  const updateProject = (index: number, field: keyof YelpPortfolioProject, value: string | boolean) => {
    setProjects(prev => prev.map((p, i) => 
      i === index ? { ...p, [field]: value } : p
    ));
  };

  const isValidProjectId = (id: string): boolean => {
    // Project ID should be alphanumeric and reasonable length
    const projectIdPattern = /^[a-zA-Z0-9_-]{3,50}$/;
    return projectIdPattern.test(id);
  };

  const toggleAllPublished = () => {
    const allPublished = projects.every(p => p.published);
    setProjects(prev => prev.map(p => ({ ...p, published: !allPublished })));
  };

  const publishedCount = projects.filter(p => p.published).length;

  return (
    <Card className="w-full max-w-4xl">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <FolderOpen className="w-5 h-5" />
          –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Yelp Portfolio –≤ —Ä–µ–∫–ª–∞–º—ñ
        </CardTitle>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Info Section */}
          <div className="bg-blue-50 p-4 rounded-lg">
            <h4 className="text-sm font-medium mb-2">üìÇ –©–æ —Ç–∞–∫–µ Yelp Portfolio:</h4>
            <ul className="text-xs text-gray-600 space-y-1">
              <li>‚Ä¢ –ü–æ–∫–∞–∑—É—î –≤–∞—à—ñ –ø—Ä–æ–µ–∫—Ç–∏/—Ä–æ–±–æ—Ç–∏ –ø—Ä—è–º–æ –≤ —Ä–µ–∫–ª–∞–º—ñ</li>
              <li>‚Ä¢ –ü—ñ–¥–≤–∏—â—É—î –¥–æ–≤—ñ—Ä—É –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤</li>
              <li>‚Ä¢ –î–µ–º–æ–Ω—Å—Ç—Ä—É—î —è–∫—ñ—Å—Ç—å –≤–∞—à–∏—Ö –ø–æ—Å–ª—É–≥</li>
              <li>‚Ä¢ –¢—ñ–ª—å–∫–∏ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ –ø—Ä–æ–µ–∫—Ç–∏ –±—É–¥—É—Ç—å –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏—Å—å –≤ —Ä–µ–∫–ª–∞–º—ñ</li>
            </ul>
          </div>

          {/* Summary */}
          {projects.length > 0 && (
            <div className="bg-green-50 p-4 rounded-lg">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium">
                    üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {projects.length} –ø—Ä–æ–µ–∫—Ç(—ñ–≤)
                  </p>
                  <p className="text-xs text-gray-600">
                    –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {publishedCount} | –ù–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {projects.length - publishedCount}
                  </p>
                </div>
                {projects.length > 1 && (
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={toggleAllPublished}
                  >
                    {projects.every(p => p.published) ? '–ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –≤—Å—ñ' : '–û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –≤—Å—ñ'}
                  </Button>
                )}
              </div>
            </div>
          )}

          {/* Projects List */}
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <Label className="text-base font-medium">–ü—Ä–æ–µ–∫—Ç–∏ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ:</Label>
              {projects.length === 0 && (
                <span className="text-sm text-gray-500">–ù–µ–º–∞—î –ø—Ä–æ–µ–∫—Ç—ñ–≤</span>
              )}
            </div>

            {projects.map((project, index) => (
              <Card key={index} className="border-gray-200">
                <CardContent className="pt-4">
                  <div className="flex items-start gap-4">
                    {/* Project ID Input */}
                    <div className="flex-1">
                      <Label htmlFor={`project_id_${index}`}>ID –ø—Ä–æ–µ–∫—Ç—É *</Label>
                      <Input
                        id={`project_id_${index}`}
                        value={project.project_id}
                        onChange={(e) => updateProject(index, 'project_id', e.target.value)}
                        placeholder="project_id_from_portfolio"
                        required
                        className={`${
                          project.project_id && !isValidProjectId(project.project_id) ? 'border-red-500' : ''
                        }`}
                      />
                      {project.project_id && !isValidProjectId(project.project_id) && (
                        <p className="text-xs text-red-600 mt-1">
                          ‚ö†Ô∏è ID –ø—Ä–æ–µ–∫—Ç—É –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –±—É–∫–≤–∏, —Ü–∏—Ñ—Ä–∏, –¥–µ—Ñ—ñ—Å–∏ —Ç–∞ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è (3-50 —Å–∏–º–≤–æ–ª—ñ–≤)
                        </p>
                      )}
                    </div>

                    {/* Published Toggle */}
                    <div className="flex flex-col items-center gap-2 min-w-[120px]">
                      <Label className="text-sm">–°—Ç–∞—Ç—É—Å</Label>
                      <div className="flex items-center gap-2">
                        <Switch
                          checked={project.published}
                          onCheckedChange={(checked) => updateProject(index, 'published', checked)}
                        />
                        <Badge 
                          variant={project.published ? "default" : "secondary"}
                          className={project.published ? "bg-green-100 text-green-800" : "bg-gray-100 text-gray-600"}
                        >
                          {project.published ? (
                            <>
                              <CheckCircle className="w-3 h-3 mr-1" />
                              –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ
                            </>
                          ) : (
                            <>
                              <XCircle className="w-3 h-3 mr-1" />
                              –ü—Ä–∏—Ö–æ–≤–∞–Ω–æ
                            </>
                          )}
                        </Badge>
                      </div>
                    </div>

                    {/* Remove Button */}
                    <Button
                      type="button"
                      variant="destructive"
                      size="sm"
                      onClick={() => removeProject(index)}
                      className="mt-6"
                    >
                      <Trash2 className="w-4 h-4" />
                    </Button>
                  </div>

                  {/* Project Preview */}
                  {project.project_id && isValidProjectId(project.project_id) && (
                    <div className="mt-3 p-3 bg-gray-50 rounded-lg">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="text-sm font-medium">–ü—Ä–æ–µ–∫—Ç: <code className="bg-white px-2 py-1 rounded">{project.project_id}</code></p>
                          <p className="text-xs text-gray-500">
                            {project.published ? '–ë—É–¥–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏—Å—å –≤ —Ä–µ–∫–ª–∞–º—ñ' : '–ù–µ –±—É–¥–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏—Å—å –≤ —Ä–µ–∫–ª–∞–º—ñ'}
                          </p>
                        </div>
                        <Button
                          type="button"
                          variant="outline"
                          size="sm"
                          onClick={() => {
                            // Navigate to portfolio manager for this project
                            const currentPath = window.location.pathname;
                            const programId = currentPath.split('/').pop();
                            window.open(`/portfolio/${programId}`, '_blank');
                          }}
                        >
                          <Eye className="w-3 h-3 mr-1" />
                          –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏
                        </Button>
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            ))}

            {/* Add Project Button */}
            <Button type="button" onClick={addProject} variant="outline" className="w-full">
              <Plus className="w-4 h-4 mr-2" />
              –î–æ–¥–∞—Ç–∏ –ø—Ä–æ–µ–∫—Ç –¥–æ —Ä–µ–∫–ª–∞–º–∏
            </Button>
          </div>

          {/* How to find Project ID */}
          <div className="bg-yellow-50 p-4 rounded-lg">
            <h4 className="text-sm font-medium mb-2">üîç –Ø–∫ –∑–Ω–∞–π—Ç–∏ ID –ø—Ä–æ–µ–∫—Ç—É:</h4>
            <ol className="text-xs text-gray-600 space-y-2 list-decimal list-inside">
              <li>–ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ —Ä–æ–∑–¥—ñ–ª—É Portfolio –≤ —Ü—å–æ–º—É –¥–æ–¥–∞—Ç–∫—É</li>
              <li>–°—Ç–≤–æ—Ä—ñ—Ç—å –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å —ñ—Å–Ω—É—é—á–∏–π –ø—Ä–æ–µ–∫—Ç</li>
              <li>–°–∫–æ–ø—ñ—é–π—Ç–µ ID –ø—Ä–æ–µ–∫—Ç—É –∑ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç—É</li>
              <li>–í—Å—Ç–∞–≤—Ç–µ ID –≤ –ø–æ–ª–µ –≤–∏—â–µ</li>
              <li>–£–≤—ñ–º–∫–Ω—ñ—Ç—å "–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ", —â–æ–± –ø—Ä–æ–µ–∫—Ç –ø–æ–∫–∞–∑—É–≤–∞–≤—Å—è –≤ —Ä–µ–∫–ª–∞–º—ñ</li>
            </ol>
          </div>

          {/* Tips */}
          <div className="bg-green-50 p-4 rounded-lg">
            <h4 className="text-sm font-medium mb-2">üí° –ü–æ—Ä–∞–¥–∏ –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ:</h4>
            <ul className="text-xs text-gray-600 space-y-1">
              <li>‚Ä¢ <strong>–Ø–∫—ñ—Å—Ç—å:</strong> –î–æ–¥–∞–≤–∞–π—Ç–µ —Ç—ñ–ª—å–∫–∏ –Ω–∞–π–∫—Ä–∞—â—ñ –ø—Ä–æ–µ–∫—Ç–∏</li>
              <li>‚Ä¢ <strong>–†—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—Å—Ç—å:</strong> –ü–æ–∫–∞–∂—ñ—Ç—å —Ä—ñ–∑–Ω—ñ –≤–∏–¥–∏ —Ä–æ–±—ñ—Ç</li>
              <li>‚Ä¢ <strong>–ê–∫—Ç—É–∞–ª—å–Ω—ñ—Å—Ç—å:</strong> –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–Ω–æ–≤–ª—é–π—Ç–µ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ</li>
              <li>‚Ä¢ <strong>–î–µ—Ç–∞–ª—ñ:</strong> –î–æ–±–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ñ –æ–ø–∏—Å–∏ –ø—Ä–æ–µ–∫—Ç—ñ–≤</li>
              <li>‚Ä¢ <strong>–§–æ—Ç–æ:</strong> –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —è–∫—ñ—Å–Ω—ñ —Ñ–æ—Ç–æ "–¥–æ" —ñ "–ø—ñ—Å–ª—è"</li>
            </ul>
          </div>

          {/* Performance Note */}
          {projects.length > 5 && (
            <div className="bg-orange-50 p-4 rounded-lg">
              <h4 className="text-sm font-medium mb-2">‚ö° –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:</h4>
              <p className="text-xs text-gray-600">
                –£ –≤–∞—Å {projects.length} –ø—Ä–æ–µ–∫—Ç(—ñ–≤). –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –≤ —Ä–µ–∫–ª–∞–º—ñ –Ω–µ –±—ñ–ª—å—à–µ 3-5 –Ω–∞–π–∫—Ä–∞—â–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤ 
                –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ —Ñ–æ–∫—É—Å—É –Ω–∞ —è–∫–æ—Å—Ç—ñ.
              </p>
            </div>
          )}

          <div className="flex gap-2 pt-4">
            <Button 
              type="submit" 
              disabled={isLoading || projects.some(p => p.project_id && !isValidProjectId(p.project_id))} 
              className="flex-1"
            >
              {isLoading ? <div className="animate-spin mr-2">‚è≥</div> : <Save className="w-4 h-4 mr-2" />}
              –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            </Button>
            <Button type="button" variant="outline" onClick={onCancel}>
              <X className="w-4 h-4 mr-2" />
              –°–∫–∞—Å—É–≤–∞—Ç–∏
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );
};

export default YelpPortfolioEditor;
