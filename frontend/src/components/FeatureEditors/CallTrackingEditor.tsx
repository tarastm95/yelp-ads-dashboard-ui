import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Switch } from '@/components/ui/switch';
import { Phone, Save, X, Plus, Trash2, Building } from 'lucide-react';

interface CallTrackingBusiness {
  business_id: string;
  metered_phone_number: string | null;
}

interface CallTrackingData {
  enabled: boolean;
  businesses: CallTrackingBusiness[];
}

interface CallTrackingEditorProps {
  data?: CallTrackingData;
  onSave: (data: CallTrackingData) => void;
  onCancel: () => void;
  isLoading?: boolean;
}

const CallTrackingEditor: React.FC<CallTrackingEditorProps> = ({
  data,
  onSave,
  onCancel,
  isLoading = false
}) => {
  const [enabled, setEnabled] = useState<boolean>(data?.enabled || false);
  const [businesses, setBusinesses] = useState<CallTrackingBusiness[]>(
    data?.businesses || [{ business_id: '', metered_phone_number: null }]
  );

  useEffect(() => {
    if (data) {
      setEnabled(data.enabled || false);
      setBusinesses(data.businesses?.length > 0 ? data.businesses : [{ business_id: '', metered_phone_number: null }]);
    }
  }, [data]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // Filter out empty businesses
    const validBusinesses = businesses
      .filter(b => b.business_id.trim())
      .map(b => ({
        business_id: b.business_id.trim(),
        metered_phone_number: b.metered_phone_number?.trim() || null
      }));

    onSave({
      enabled,
      businesses: validBusinesses
    });
  };

  const addBusiness = () => {
    setBusinesses(prev => [...prev, { business_id: '', metered_phone_number: null }]);
  };

  const removeBusiness = (index: number) => {
    setBusinesses(prev => prev.filter((_, i) => i !== index));
  };

  const updateBusiness = (index: number, field: keyof CallTrackingBusiness, value: string) => {
    setBusinesses(prev => prev.map((b, i) => 
      i === index ? { ...b, [field]: value || null } : b
    ));
  };

  const formatPhoneNumber = (phone: string): string => {
    // Remove all non-digit characters
    const digits = phone.replace(/\D/g, '');
    
    // Format as (XXX) XXX-XXXX for US numbers
    if (digits.length === 10) {
      return `(${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6)}`;
    } else if (digits.length === 11 && digits[0] === '1') {
      return `+1 (${digits.slice(1, 4)}) ${digits.slice(4, 7)}-${digits.slice(7)}`;
    }
    
    return phone; // Return as-is if doesn't match expected format
  };

  return (
    <Card className="w-full max-w-3xl">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Phone className="w-5 h-5" />
          –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫—ñ–≤
        </CardTitle>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Global Enable/Disable */}
          <div className="flex items-center space-x-3 p-4 bg-blue-50 rounded-lg">
            <Switch
              id="call-tracking-enabled"
              checked={enabled}
              onCheckedChange={setEnabled}
            />
            <div>
              <Label htmlFor="call-tracking-enabled" className="text-base font-medium">
                Enable Call Tracking
              </Label>
              <p className="text-sm text-gray-600">
                {enabled 
                  ? 'Call tracking is active for the entire campaign' 
                  : 'Call tracking is disabled'
                }
              </p>
            </div>
          </div>

          {enabled && (
            <div className="space-y-4">
              <div className="bg-yellow-50 p-4 rounded-lg">
                <h4 className="text-sm font-medium mb-2">üìû –Ø–∫ –ø—Ä–∞—Ü—é—î –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫—ñ–≤:</h4>
                <ul className="text-xs text-gray-600 space-y-1">
                  <li>‚Ä¢ Yelp –Ω–∞–¥–∞—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –Ω–æ–º–µ—Ä–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É</li>
                  <li>‚Ä¢ –¶—ñ –Ω–æ–º–µ—Ä–∏ –∑–∞–º—ñ–Ω—é—é—Ç—å –≤–∞—à—ñ –∑–≤–∏—á–∞–π–Ω—ñ –Ω–æ–º–µ—Ä–∏ –≤ —Ä–µ–∫–ª–∞–º—ñ</li>
                  <li>‚Ä¢ –î–∑–≤—ñ–Ω–∫–∏ –ø–µ—Ä–µ—Å–ø—Ä—è–º–æ–≤—É—é—Ç—å—Å—è –Ω–∞ –≤–∞—à —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –Ω–æ–º–µ—Ä</li>
                  <li>‚Ä¢ –ó–≤—ñ—Ç–Ω—ñ—Å—Ç—å –ø–æ –¥–∑–≤—ñ–Ω–∫–∞—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –∫–∞–±—ñ–Ω–µ—Ç—ñ Yelp</li>
                  <li>‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–ø–ª–∏–≤–∞—î –ª–∏—à–µ –Ω–∞ —Ü—é CPC-–ø—Ä–æ–≥—Ä–∞–º—É</li>
                  <li>‚Ä¢ –ù–æ–º–µ—Ä–∏ –º–æ–∂–Ω–∞ –∑–∞–¥–∞—Ç–∏ —Ç–∞–∫–æ–∂ –Ω–∞ —Ä—ñ–≤–Ω—ñ –ª–æ–∫–∞—Ü—ñ—ó (Data Ingestion API)</li>
                </ul>
              </div>

              <Label className="text-base font-medium">–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –±—ñ–∑–Ω–µ—Å—ñ–≤:</Label>

              {businesses.map((business, index) => (
                <Card key={index} className="border-gray-200">
                  <CardHeader className="pb-3">
                    <div className="flex items-center justify-between">
                      <h4 className="text-lg font-medium flex items-center gap-2">
                        <Building className="w-4 h-4" />
                        –ë—ñ–∑–Ω–µ—Å #{index + 1}
                      </h4>
                      {businesses.length > 1 && (
                        <Button
                          type="button"
                          variant="destructive"
                          size="sm"
                          onClick={() => removeBusiness(index)}
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      )}
                    </div>
                  </CardHeader>
                  
                  <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor={`business_id_${index}`}>ID –±—ñ–∑–Ω–µ—Å—É *</Label>
                      <Input
                        id={`business_id_${index}`}
                        value={business.business_id}
                        onChange={(e) => updateBusiness(index, 'business_id', e.target.value)}
                        placeholder="your_business_id_here"
                        required
                      />
                    </div>

                    <div>
                      <Label htmlFor={`phone_${index}`}>–ù–æ–º–µ—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è</Label>
                      <Input
                        id={`phone_${index}`}
                        type="tel"
                        value={business.metered_phone_number || ''}
                        onChange={(e) => updateBusiness(index, 'metered_phone_number', e.target.value)}
                        placeholder="(555) 123-4567 –∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º"
                        onBlur={(e) => {
                          if (e.target.value) {
                            updateBusiness(index, 'metered_phone_number', formatPhoneNumber(e.target.value));
                          }
                        }}
                      />
                      <p className="text-xs text-gray-500 mt-1">
                        –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ. –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ ‚Äî –¥–ª—è —Ü—å–æ–≥–æ –±—ñ–∑–Ω–µ—Å—É –≤ –º–µ–∂–∞—Ö —Ü—ñ—î—ó CPC-–ø—Ä–æ–≥—Ä–∞–º–∏ –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫—ñ–Ω–≥—É –Ω–µ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è
                      </p>
                    </div>
                  </CardContent>
                </Card>
              ))}

              <Button type="button" onClick={addBusiness} variant="outline" className="w-full">
                <Plus className="w-4 h-4 mr-2" />
                –î–æ–¥–∞—Ç–∏ —â–µ –æ–¥–∏–Ω –±—ñ–∑–Ω–µ—Å
              </Button>
            </div>
          )}

          <div className="bg-green-50 p-4 rounded-lg">
            <h4 className="text-sm font-medium mb-2">üìä –ü–µ—Ä–µ–≤–∞–≥–∏ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫—ñ–≤:</h4>
            <ul className="text-xs text-gray-600 space-y-1">
              <li>‚Ä¢ <strong>ROI-–∞–Ω–∞–ª—ñ–∑:</strong> –º–æ–∂–µ—Ç–µ –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –¥–∑–≤—ñ–Ω–∫—ñ–≤ –≤—ñ–¥ —Ä–µ–∫–ª–∞–º–∏</li>
              <li>‚Ä¢ <strong>–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è:</strong> —Ä–æ–∑—É–º—ñ—î—Ç–µ, —è–∫—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –≥–µ–Ω–µ—Ä—É—é—Ç—å –¥–∑–≤—ñ–Ω–∫–∏</li>
              <li>‚Ä¢ <strong>–Ø–∫—ñ—Å—Ç—å —Ç—Ä–∞—Ñ—ñ–∫—É:</strong> –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç–µ –ø–ª–∞—Ç–Ω–∏–π —Ç—Ä–∞—Ñ—ñ–∫ –≤—ñ–¥ –æ—Ä–≥–∞–Ω—ñ—á–Ω–æ–≥–æ</li>
              <li>‚Ä¢ <strong>–ö–æ–Ω–≤–µ—Ä—Å—ñ—ó:</strong> —Ç—Ä–µ–∫–∞—î—Ç–µ –≤—Å—é –≤–æ—Ä–æ–Ω–∫—É –≤—ñ–¥ –∫–ª—ñ–∫–∞ –¥–æ –¥–∑–≤—ñ–Ω–∫–∞</li>
              <li>‚Ä¢ <strong>–ó–≤—ñ—Ç–Ω—ñ—Å—Ç—å:</strong> call-tracking —É Reporting API –∑–∞—Ä–∞–∑ –Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è</li>
            </ul>
          </div>

          <div className="flex gap-2 pt-4">
            <Button type="submit" disabled={isLoading} className="flex-1">
              {isLoading ? <div className="animate-spin mr-2">‚è≥</div> : <Save className="w-4 h-4 mr-2" />}
              –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            </Button>
            <Button type="button" variant="outline" onClick={onCancel}>
              <X className="w-4 h-4 mr-2" />
              –°–∫–∞—Å—É–≤–∞—Ç–∏
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );
};

export default CallTrackingEditor;
