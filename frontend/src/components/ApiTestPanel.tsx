import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { TEST_BUSINESS_IDS } from '@/constants/testData';
import { useCreateProgramMutation } from '@/store/api/yelpApi';
import { toast } from '@/hooks/use-toast';
import { TestTube, Copy } from 'lucide-react';

const ApiTestPanel: React.FC = () => {
  const [createProgram, { isLoading }] = useCreateProgramMutation();
  const [results, setResults] = useState<string>('');

  // –ü—Ä–∏–∫–ª–∞–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
  const testCases = [
    {
      name: 'BP (Branded Profile)',
      description: '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è Branded Profile –±–µ–∑ CPC –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤',
      payload: {
        business_id: TEST_BUSINESS_IDS[0],
        program_name: 'BP',
        start: '2025-08-21',
        end: '2025-08-23'
      }
    },
    {
      name: 'CPC –∑ –∞–≤—Ç–æ–±—ñ–¥–æ–º',
      description: 'CPC –ø—Ä–æ–≥—Ä–∞–º–∞ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –±—ñ–¥—É–≤–∞–Ω–Ω—è–º',
      payload: {
        business_id: TEST_BUSINESS_IDS[0],
        program_name: 'CPC',
        budget: 20000, // $200.00 –≤ —Ü–µ–Ω—Ç–∞—Ö
        is_autobid: true,
        start: '2025-08-21',
        end: '2025-08-23'
      }
    },
    {
      name: 'CPC –∑ —Ä—É—á–Ω–∏–º –±—ñ–¥–æ–º',
      description: 'CPC –ø—Ä–æ–≥—Ä–∞–º–∞ –∑ —Ä—É—á–Ω–∏–º –±—ñ–¥—É–≤–∞–Ω–Ω—è–º',
      payload: {
        business_id: TEST_BUSINESS_IDS[1],
        program_name: 'CPC',
        budget: 20000, // $200.00 –≤ —Ü–µ–Ω—Ç–∞—Ö
        is_autobid: false,
        max_bid: 500, // $5.00 –≤ —Ü–µ–Ω—Ç–∞—Ö
        start: '2025-08-21',
        end: '2025-08-23'
      }
    }
  ];

  const runTest = async (testCase: typeof testCases[0]) => {
    try {
      setResults(prev => prev + `\nüß™ –¢–µ—Å—Ç—É—î–º–æ: ${testCase.name}\n`);
      setResults(prev => prev + `üì§ Payload: ${JSON.stringify(testCase.payload, null, 2)}\n`);
      
      const result = await createProgram(testCase.payload).unwrap();
      
      setResults(prev => prev + `‚úÖ –£—Å–ø—ñ—Ö: ${JSON.stringify(result, null, 2)}\n`);
      setResults(prev => prev + `üîó Job ID: ${result.job_id}\n`);
      setResults(prev => prev + '‚îÄ'.repeat(50) + '\n');
      
      toast({
        title: `${testCase.name} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ`,
        description: `Job ID: ${result.job_id}`,
      });
    } catch (error: any) {
      setResults(prev => prev + `‚ùå –ü–æ–º–∏–ª–∫–∞: ${JSON.stringify(error, null, 2)}\n`);
      setResults(prev => prev + '‚îÄ'.repeat(50) + '\n');
      
      toast({
        title: `–ü–æ–º–∏–ª–∫–∞ –≤ ${testCase.name}`,
        description: error?.data?.detail || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞',
        variant: "destructive",
      });
    }
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ",
      description: "–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É",
    });
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <TestTube className="h-5 w-5" />
            API Test Panel
          </CardTitle>
          <CardDescription>
            –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –∑–≥—ñ–¥–Ω–æ –∑ Yelp Ads API –ø—Ä–∞–≤–∏–ª–∞–º–∏
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid gap-4">
            {testCases.map((testCase, index) => (
              <div key={index} className="border rounded p-4">
                <div className="flex justify-between items-start mb-2">
                  <div>
                    <h4 className="font-semibold">{testCase.name}</h4>
                    <p className="text-sm text-gray-600">{testCase.description}</p>
                  </div>
                  <Button
                    onClick={() => runTest(testCase)}
                    disabled={isLoading}
                    size="sm"
                  >
                    {isLoading ? '–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è...' : '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç'}
                  </Button>
                </div>
                <details className="mt-2">
                  <summary className="text-sm text-blue-600 cursor-pointer">
                    –ü–æ–∫–∞–∑–∞—Ç–∏ payload
                  </summary>
                  <pre className="text-xs bg-gray-100 p-2 rounded mt-2 overflow-x-auto">
                    {JSON.stringify(testCase.payload, null, 2)}
                  </pre>
                </details>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <div className="flex justify-between items-center">
            <CardTitle>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è</CardTitle>
            <div className="space-x-2">
              <Button
                onClick={() => copyToClipboard(results)}
                variant="outline"
                size="sm"
                disabled={!results}
              >
                <Copy className="h-4 w-4 mr-2" />
                –ö–æ–ø—ñ—é–≤–∞—Ç–∏
              </Button>
              <Button
                onClick={() => setResults('')}
                variant="outline"
                size="sm"
                disabled={!results}
              >
                –û—á–∏—Å—Ç–∏—Ç–∏
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <Textarea
            value={results}
            readOnly
            placeholder="–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—ñ–≤ –∑'—è–≤–ª—è—Ç—å—Å—è —Ç—É—Ç..."
            className="min-h-[400px] font-mono text-sm"
          />
        </CardContent>
      </Card>
    </div>
  );
};

export default ApiTestPanel;
